# -*- coding: utf-8 -*-?
import telebot
import time

import requests.exceptions as r_exceptions
from requests import ConnectionError

import const, markups, config, base

bot = telebot.TeleBot(const.token)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∫–æ–º–∞–Ω–¥—ã - –≤—ã–¥–∞—á–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['FAQ']])
    text = message.text.split(" ")
    if len(text) == 2:
        if text[1].isdigit():
            initial_id = text[1]
            base.addInvitation(initial_id, int(message.chat.id))
    base.add_user(message)
    if not base.is_admin(message.chat.id):
        bot.send_message(message.chat.id, const.welcome, parse_mode='HTML', reply_markup=markups.start())
        bot.send_message(message.chat.id, "<i>CryptoInsideBot Info<i/>", parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, const.welcome, parse_mode='HTML', reply_markup=markups.start_admin())
        bot.send_message(message.chat.id, "<i>CryptoInsideBot Info</i>", parse_mode='HTML', reply_markup=keyboard)


@bot.message_handler(regexp="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin(message):
    if not base.is_admin(message.chat.id):
        bot.send_message(message.chat.id, const.access)
    else:
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markups.admin_panel())


# –í—ã–¥–∞—á–∞ –ø–∞–∫–µ—Ç–æ–≤
@bot.message_handler(regexp='–û–ø–ª–∞—Ç–∞')
def client_panel(message):
    keyboard4 = telebot.types.InlineKeyboardMarkup()
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖTest Drive']])
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖVIP']])
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖVIP + –ü–ê–ú–ü–´']])
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖ–û–±—É—á–µ–Ω–∏–µ']])
    bot.send_message(message.chat.id, const.paket_0, reply_markup=keyboard4)


@bot.callback_query_handler(func=lambda c: True)
def inline(c):
    markup1 = telebot.types.InlineKeyboardMarkup()
    btn_back = telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data='buy_1')
    markup1.add(btn_back)

    markup2 = telebot.types.InlineKeyboardMarkup()
    btn_back = telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data='buy_2')
    markup2.add(btn_back)

    markup3 = telebot.types.InlineKeyboardMarkup()
    btn_back = telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data='buy_3')
    markup3.add(btn_back)

    markup4 = telebot.types.InlineKeyboardMarkup()
    btn_back = telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data='buy_4')
    markup4.add(btn_back)

    keyboard2 = telebot.types.InlineKeyboardMarkup()
    keyboard2.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['FAQ']])

    keyboard1 = telebot.types.InlineKeyboardMarkup()
    keyboard1.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–°–∫—Ä—ã—Ç—å']])

    keyboard4 = telebot.types.InlineKeyboardMarkup()
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖTest Drive']])
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖVIP']])
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖVIP + –ü–ê–ú–ü–´']])
    keyboard4.add(*[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for name in ['‚úÖ–û–±—É—á–µ–Ω–∏–µ']])
    if c.data == 'FAQ':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text=const.FAQ, parse_mode='html', reply_markup=keyboard1)

    if c.data == '‚úÖTest Drive':
        bot.edit_message_text(const.paket_1, chat_id=c.message.chat.id, message_id=c.message.message_id,
                              reply_markup=markup1)

    if c.data == '‚úÖVIP':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text=const.paket_2, reply_markup=markup2)

    if c.data == '‚úÖVIP + –ü–ê–ú–ü–´':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text=const.paket_3, reply_markup=markup3)

    if c.data == '‚úÖ–û–±—É—á–µ–Ω–∏–µ':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text=const.paket_4, reply_markup=markup4)

    if c.data == '–ù–∞–∑–∞–¥':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç', reply_markup=keyboard4)

    if c.data == 'buy_1':
        bot.send_message(c.message.chat.id, "‚úÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ—á–Ω–æ 0.012 BTC (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏) "
                          "–Ω–∞ –∫–æ—à–µ–ª–µ–∫ üîπ1LZwYT81XJvKxk48utNEKqgAxkBH913t37 üîπ  \n"
                          "‚ùóÔ∏è–ï—Å–ª–∏ —è –ø–æ–ª—É—á—É —Å—É–º–º—É –º–µ–Ω—å—à—É—é –∏–ª–∏ –±–æ–ª—å—à—É—é —á–µ–º 0.012 BTC - –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ —Ä—É—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. \n"
                          "‚úÖ–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ BitCoin, "
                          "—è –í–∞—Å —É–≤–µ–¥–æ–º–ª—é –æ–± —ç—Ç–æ–º. –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –í–∞–º–∏ –∫–æ–º–∏—Å—Å–∏–∏ "
                          "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫, –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å "
                          "—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=markups.buy_0())

    if c.data == 'buy_2':
        bot.send_message(c.message.chat.id, "‚úÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ—á–Ω–æ 0.02 BTC (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏) "
                          "–Ω–∞ –∫–æ—à–µ–ª–µ–∫ üîπ1LZwYT81XJvKxk48utNEKqgAxkBH913t37 üîπ  \n"
                          "‚ùóÔ∏è–ï—Å–ª–∏ —è –ø–æ–ª—É—á—É —Å—É–º–º—É –º–µ–Ω—å—à—É—é –∏–ª–∏ –±–æ–ª—å—à—É—é —á–µ–º 0.02 BTC - –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ —Ä—É—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. \n"
                          "‚úÖ–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ BitCoin, "
                          "—è –í–∞—Å —É–≤–µ–¥–æ–º–ª—é –æ–± —ç—Ç–æ–º. –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –í–∞–º–∏ –∫–æ–º–∏—Å—Å–∏–∏ "
                          "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫, –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å "
                          "—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=markups.buy_0())

    if c.data == 'buy_3':
        bot.send_message(c.message.chat.id, "‚úÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ—á–Ω–æ 0.04 BTC (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏) "
                          "–Ω–∞ –∫–æ—à–µ–ª–µ–∫ üîπ1LZwYT81XJvKxk48utNEKqgAxkBH913t37 üîπ  \n"
                          "‚ùóÔ∏è–ï—Å–ª–∏ —è –ø–æ–ª—É—á—É —Å—É–º–º—É –º–µ–Ω—å—à—É—é –∏–ª–∏ –±–æ–ª—å—à—É—é —á–µ–º 0.04 BTC - –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ —Ä—É—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. \n"
                          "‚úÖ–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ BitCoin, "
                          "—è –í–∞—Å —É–≤–µ–¥–æ–º–ª—é –æ–± —ç—Ç–æ–º. –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –í–∞–º–∏ –∫–æ–º–∏—Å—Å–∏–∏ "
                          "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫, –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å "
                          "—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=markups.buy_0())

    if c.data == 'buy_4':
        bot.send_message(c.message.chat.id, "‚úÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ—á–Ω–æ 0.01 BTC (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏) "
                          "–Ω–∞ –∫–æ—à–µ–ª–µ–∫ üîπ1LZwYT81XJvKxk48utNEKqgAxkBH913t37 üîπ  \n"
                          "‚ùóÔ∏è–ï—Å–ª–∏ —è –ø–æ–ª—É—á—É —Å—É–º–º—É –º–µ–Ω—å—à—É—é –∏–ª–∏ –±–æ–ª—å—à—É—é —á–µ–º 0.01 BTC - –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ —Ä—É—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. \n"
                          "‚úÖ–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ BitCoin, "
                          "—è –í–∞—Å —É–≤–µ–¥–æ–º–ª—é –æ–± —ç—Ç–æ–º. –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –í–∞–º–∏ –∫–æ–º–∏—Å—Å–∏–∏ "
                          "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫, –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å "
                          "—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=markups.buy_0())

    if c.data == '–°–∫—Ä—ã—Ç—å':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text='<i>CryptoInsideBot Info</i>', parse_mode='html', reply_markup=keyboard2)

    if c.data == '–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤':
        msg = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")
        bot.register_next_step_handler(msg, send_to_clients)

    if c.data == "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤":
        msg = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –Ω–µ –∫–ª–∏–µ–Ω—Ç–∞–º")
        bot.register_next_step_handler(msg, send_to_non_clients)

    if c.data == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        users = base.get_all_users()
        txt = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n'
        for user in users:
            who_inv = base.who_invited(user[1])
            txt = txt + "{n}. @{username}\n".format(n=user[0], username=user[4])
            if who_inv:
                txt = txt + "    –ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {who_inv}\n".format(who_inv=who_inv)
            if user[8] == "TRUE":
                txt = txt + "    –°—Ç–∞—Ç—É—Å: –û–ü–õ–ê–¢–ò–õ\n\n"
            else:
                txt = txt + "    –°—Ç–∞—Ç—É—Å: –ù–ï –û–ü–õ–ê–¢–ò–õ\n\n"
        bot.edit_message_text(txt, c.message.chat.id, c.message.message_id, reply_markup=markups.admin_panel())

    if c.data == '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id,
                                      reply_markup=telebot.types.ReplyKeyboardMarkup())
        msg = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å")
        bot.register_next_step_handler(msg, add_client)

    if c.data == '–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id,
                                      reply_markup=telebot.types.ReplyKeyboardMarkup())
        msg = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        bot.register_next_step_handler(msg, del_client)

    if c.data == 'welcome':
        if not base.is_admin(c.message.chat.id):
            bot.send_message(c.message.chat.id, const.welcome, reply_markup=markups.start())
        else:
            bot.send_message(c.message.chat.id, const.welcome, reply_markup=markups.start_admin())


def send_to_clients(message):
    count = 0
    for user in base.get_all_users():
        if user[8] == 'TRUE':
            count += 1
            if user[1] == const.admin_id:
                continue
            if count % 20 == 0:
                time.sleep(1)
            markup = telebot.types.InlineKeyboardMarkup()
            back = telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="welcome")
            text = "–í–µ—Ä–Ω—É—Ç—å—Å—è"
            markup.add(back)
            try:
                bot.send_message(user[1], message.text)
                #bot.send_message(user[1], "<b>%s</b>" % text, reply_markup=markup, parse_mode="html")

                print("message sent to %s count = %s" % (user[1], count))
            except Exception as e:
                continue
    print(count)
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º!",
                     reply_markup=markups.admin_panel())


def send_to_non_clients(message):
    count = 0
    for user in base.get_all_users():
        if user[8] == 'FALSE':
            count += 1
            print(count)
            if user[1] == const.admin_id:
                continue
            if count % 20 == 0:
                time.sleep(1)
            markup = telebot.types.InlineKeyboardMarkup()
            back = telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="welcome")
            text = "–í–µ—Ä–Ω—É—Ç—å—Å—è"
            markup.add(back)
            try:
                bot.send_message(user[1], message.text)
                #bot.send_message(user[1], "<b>%s</b>" % text, reply_markup=markup, parse_mode="html")

                print("message sent to %s count = %s" % (user[4], count))
            except Exception as e:
                continue
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Ç–µ–º, –∫—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏!",
                     reply_markup=markups.admin_panel())


def add_client(c):
    status = base.true_pay(c.text)
    if status:
        bot.send_message(c.chat.id, "–ì–æ—Ç–æ–≤–æ!")
    else:
        print("ERR : client not in DB")
        bot.send_message(c.chat.id, "–¢–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    bot.send_message(c.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markups.admin_panel())


def del_client(c):
    status = base.false_pay(c.text)
    if status:
        bot.send_message(c.chat.id, "–ì–æ—Ç–æ–≤–æ!")
    else:
        print("ERR : client not in DB")
        bot.send_message(c.chat.id, "–¢–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    bot.send_message(c.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markups.admin_panel())


@bot.message_handler(regexp="‚úÖ–Ø –æ–ø–ª–∞—Ç–∏–ª")
def buy(message):
    if not base.is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ ‚ùóÔ∏è\n"
                                          "‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @Crypto_Boss –∏ —É–∫–∞–∂–∏—Ç–µ id —Ç—Ä–∞–Ω–∞–∑–∞–∫—Ü–∏–∏ –¢–ï–ö–°–¢–û–ú, "
                                          "–ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.",
                         reply_markup=markups.start())
    else:
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ ‚ùóÔ∏è\n"
                                      "‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @Crypto_Boss –∏ —É–∫–∞–∂–∏—Ç–µ id —Ç—Ä–∞–Ω–∞–∑–∞–∫—Ü–∏–∏ –¢–ï–ö–°–¢–û–ú, "
                                      "–ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.",
                         reply_markup=markups.start_admin())


# –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
@bot.message_handler(regexp="üíé–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º")
def referalka(message):
    bot.send_message(message.chat.id, const.partnerka + '–£ –≤–∞—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {0}\n'
                                      '–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:'
                                      ' https://t.me/Client_Test_bot?start={1}'.format(*base.getValuesPartnership(message.chat.id)))


# –í—ã–¥–∞—á–∞ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@bot.message_handler(regexp='–û –Ω–∞—Å')
def about_us(message):
    bot.send_message(message.chat.id, const.about, parse_mode='html')


# –ü—Ä–∏–µ–º –ø–∏—Å–µ–º –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É
@bot.message_handler(regexp='üõ†–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
def settings(message):
    sent = bot.send_message(message.chat.id, '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É')
    bot.register_next_step_handler(sent, help)


def help(message):
    if (message.text != "üì°–û–ø–ª–∞—Ç–∞") and (message.text != "üíé–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º") and (message.text != "üõ†–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞") and \
            (message.text != "üè¶–û –Ω–∞—Å") and (message.text != "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"):
        bot.send_message(const.help_id, '{name}'.format(name=message.text))
        bot.send_message(const.help_id, '–ù–∏–∫–Ω–µ–π–º: @' + str(message.from_user.username))
        bot.send_message(message.chat.id, '–í–∞—à–µ –ø–∏—Å—å–º–æ –ø—Ä–∏–Ω—è—Ç–æ')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except ConnectionError as expt:
        config.log(Exception='HTTP_CONNECTION_ERROR', text=expt)
        print('Connection lost..')
        time.sleep(30)
        continue
    except r_exceptions.Timeout as exptn:
        config.log(Exception='HTTP_REQUEST_TIMEOUT_ERROR', text=exptn)
        time.sleep(5)
        continue
